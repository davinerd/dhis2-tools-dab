ES_USER_PWD="$(lxc exec $NAME -- cat .es_elastic_passwd)"
lxc exec $NAME -- rm -rf .es_elastic_passwd

creds_str='{"service":"elasticsearch","username":"elastic","password":"'${ES_USER_PWD}'"}'
save_creds $creds_str

log_info "Waiting for Kibana to be up&running"
lxc exec $NAME -- su -c "while ! nc -q 1 ${IP} 5601 </dev/null; do sleep 10; done"

log_info "Configuring Elasticsearch and Kibana"
lxc file push configs/es_siem/ $NAME/root/ -r

# create pipeline
ack=$(lxc exec $NAME -- sh -c "curl -XPUT -u \"elastic:${ES_USER_PWD}\" -k -H 'Content-Type:application/json' https://localhost:9200/_ingest/pipeline/message_to_json -d @/root/es_siem/ingest_pipelines/es_ingest_pipeline.json -s")
if [[ $(jq -r .acknowledged <<< $ack) == "false" ]]; then
  log_warn "Failed to configure ingest pipeline: $ack"
fi

# create alerts index
ack=$(lxc exec $NAME -- sh -c "curl -XPUT -u \"elastic:${ES_USER_PWD}\" -k https://localhost:9200/global-alerts -s")
if [[ $(jq -r .acknowledged <<< $ack) == "false" ]]; then
  log_warn "Failed to create global-alerts index: $ack"
fi

# create alerts index connector
ack=$(lxc exec $NAME -- sh -c "curl -XPOST -u \"elastic:${ES_USER_PWD}\" http://${IP}:5601/api/actions/connector -d '{
  \"name\": \"global-alerts\",
  \"connector_type_id\": \".index\",
  \"config\": {
    \"index\": \"global-alerts\",
    \"refresh\": true,
   \"executionTimeField\": \"@timestamp\"
  }
}' -H 'Content-Type:application/json' -H 'kbn-xsrf: true' -s")
if [[ $(jq -r 'has("statusCode")' <<< $ack) == "true" ]]; then
  log_warn "Failed to create global-alerts connector: $ack"
fi

connector_id=$(lxc exec $NAME -- sh -c "curl -u \"elastic:${ES_USER_PWD}\" http://${IP}:5601/api/actions/connectors -H 'kbn-xsrf: true'  -s" | jq -r .[].id)
lxc exec $NAME -- sed -i "s/CONNECTOR_ID/$connector_id/" /root/es_siem/alert_rules/failed_logins.json
# create rule
ack=$(lxc exec $NAME -- sh -c "curl -XPOST -u \"elastic:${ES_USER_PWD}\" http://${IP}:5601/api/alerting/rule -d @/root/es_siem/alert_rules/failed_logins.json -H 'Content-Type:application/json' -H 'kbn-xsrf: true' -s")
if [[ $(jq -r 'has("statusCode")' <<< $ack) == "true" ]]; then
  log_warn "Failed to create failed login alert rule: $ack"
fi

# create global datav iew
ack=$(lxc exec $NAME -- sh -c "curl -XPOST -u \"elastic:${ES_USER_PWD}\" http://${IP}:5601/api/data_views/data_view -d @/root/es_siem/data_views/es_default_data_view.json -H 'Content-Type:application/json' -H 'kbn-xsrf: true' -s")
if [[ $(jq -r 'has("statusCode")' <<< $ack) == "true" ]]; then
  log_warn "Failed to configure Kibana default data view: $ack"
fi

# create alerts data view
ack=$(lxc exec $NAME -- sh -c "curl -XPOST -u \"elastic:${ES_USER_PWD}\" http://${IP}:5601/api/data_views/data_view -d @/root/es_siem/data_views/es_alerts_data_view.json -H 'Content-Type:application/json' -H 'kbn-xsrf: true' -s")
if [[ $(jq -r 'has("statusCode")' <<< $ack) == "true" ]]; then
  log_warn "Failed to configure Kibana alerts data view: $ack"
fi

lxc exec $NAME -- rm -rf es_siem/

# clean variables holding sensitive info
ES_USER_PWD=""
creds_str=""

running_containers=$(lxc list -c n,s -f csv | grep -i running | cut -d ',' -f1)
for container in $running_containers; do
  containerz=$(echo $CONTAINERS | jq -r --arg cname "$container" '. | select(.name == $cname)')

  if [[ "$containerz" ]]; then
    container_name=$(echo $containerz | jq -r .name)
    container_type=$(echo $containerz | jq -r .type)
  else
    container_name="$container"
    container_type=""
  fi

  # Skip configuration for logger and SIEM
  if ! [[ "$container_type" =~ "siem" ]] && ! [[ "$container_type" =~ "logger" ]] || ! [ "$container_type" ]; then
    log_info "Configuring journal for '$container_name'"
    dhis2-set-journal $container_name $container_type

    log_info "Configuring filebeat for '$container_name'"
    dhis2-set-elasticsearch -i "$IP" $container_name
  fi
done

log_info "Configuring Kibana proxy access"
PROXY_CONTAINER=$(echo $CONTAINERS | jq '. | select(.type | contains("proxy")) |.name' | tr -d '"')

if [[ $PROXY == "nginx" ]] || [[ $PROXY == "apache2" ]]; then
  if [[ $PROXY == "nginx" ]]; then
    cat <<EOF > /tmp/${NAME}.conf
      # Proxy pass to servlet container

      location /${NAME} {
        proxy_pass                http://${IP}:5601;
        include                   /etc/nginx/proxy_params;
    }
EOF

  lxc file push /tmp/${NAME}.conf ${PROXY_CONTAINER}/etc/nginx/upstream/${NAME}.conf
  rm /tmp/${NAME}.conf
  lxc exec ${PROXY_CONTAINER} -- service nginx restart

  elif [[ $PROXY == "apache2" ]]; then
    cat <<EOF > /tmp/${NAME}
    <Location /${NAME}>
      Require all granted
      ProxyPass "http://${IP}:5601"
      ProxyPassReverse "http://${IP}:5601"
    </Location>
EOF

    lxc file push /tmp/${NAME} ${PROXY_CONTAINER}/etc/apache2/upstream/${NAME}
    rm /tmp/${NAME}
    lxc exec ${PROXY_CONTAINER} -- service apache2 restart
  fi

  lxc exec $NAME -- sh -c "echo \"server.basePath: \"/${NAME}\"\" >> /etc/kibana/kibana.yml"
  lxc exec $NAME -- sh -c "echo 'server.rewriteBasePath: true'  >> /etc/kibana/kibana.yml"
  lxc exec $NAME -- sh -c "echo \"server.publicBaseUrl: \"https://${FQDN}/${NAME}\"\" >> /etc/kibana/kibana.yml"
  lxc exec $NAME -- service kibana restart

else
  log_warn "Proxy type '$PROXY' not supported. SIEM not configured for proxy access"
fi

log_info "Done configuring SIEM"