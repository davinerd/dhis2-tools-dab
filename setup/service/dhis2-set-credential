#!/bin/env bash

# Parse json config file
source parse_config.sh # FIX - use absolute path

# Include logging
source libs.sh # FIX - use as absolute path

SERVICE=$1
CONTAINER_NAME=$2
GLOWROOT_VERSION="0.13.6"
#VALID_SERVICES=$(lxc list -c n -f csv | grep -v 'postgres\|proxy' | tr '\n' ' ')
VALID_SERVICES=("munin" "glowroot" "elasticsearch")

# Help text for this script
function usage {
  echo "Set credential for services."
  echo 
  echo "usage: dhis2-set-credential <SERVICE> <CONTAINER_NAME> [<credentials>]"
  echo "  Valid services are: ${VALID_SERVICES[@]}"
  echo "Options:"
  echo "credentials   JSON string containing the credentials in form: {'username':'user', 'password':'password'}"
  echo
}

function save_munin_creds() {
  local readonly passwd="$1"
  # For old versions
  lxc exec $CONTAINER_NAME -- perl -pi -e "s|Require all granted|AuthUserFile /etc/munin/.htpasswd\n    Authtype Basic\n    AuthName \"Munin\"\n    Require valid-user\n    Options FollowSymLinks SymLinksIfOwnerMatch|sig" /etc/munin/apache24.conf

  local tfile="$(mktemp)" || exit 1
  htpasswd -b -c ${tfile} admin ${passwd}
  lxc file push ${tfile} $CONTAINER_NAME/etc/munin/.htpasswd
  rm -rf $tfile

  lxc exec $CONTAINER_NAME -- chmod 644 /etc/munin/.htpasswd
  lxc exec $CONTAINER_NAME -- service apache2 restart

  echo "Credentials have been set"
  echo "========================="
  echo "Service: monitor (munin)"
  echo "Username: admin"
  echo "Password: ${passwd}"

  # write creds to file
  local json_str='{"service":"munin","username":"admin","password":"'${passwd}'"}'
  save_creds $json_str
}

function save_glowroot_creds() {
  local readonly passwd="$1"
  local tdir=$(mktemp -d)
  #Hash glowroot password
  lxc exec $CONTAINER_NAME -- wget -P ${tdir} https://github.com/glowroot/glowroot/releases/download/v${GLOWROOT_VERSION}/glowroot-central-${GLOWROOT_VERSION}-dist.zip
  lxc exec $CONTAINER_NAME -- unzip -q -o ${tdir}/glowroot-central-${GLOWROOT_VERSION}-dist.zip -d ${tdir}
  local GLOWROOT_PASSWD_ENC=$(lxc exec $CONTAINER_NAME -- java -jar ${tdir}/glowroot-central/glowroot-central.jar hash-password $passwd)
  random_file="/tmp/$(cat /dev/urandom | tr -cd 'a-fA-F0-9' | head -c 12).json"
  lxc file pull $CONTAINER_NAME/opt/glowroot/admin.json ${random_file}
  echo "$(jq --arg context /${CONTAINER_NAME}-glowroot '.web.contextPath=$context' ${random_file})" > ${random_file}

  # To convert old exposed glowroot to authentication
  users_enabled=$(jq .users[].username ${random_file})
  if [[ "$users_enabled" == "\"anonymous\"" ]]; then
    sed -i -e 's/anonymous/admin/' ${random_file}
  fi

  echo "$(jq --arg passwordHash $GLOWROOT_PASSWD_ENC '.users |= map(if .username=="admin" then .passwordHash=$passwordHash else . end)' ${random_file})" > ${random_file}
  lxc file push ${random_file} $CONTAINER_NAME/opt/glowroot/admin.json
  rm -rf ${random_file}

  lxc exec $CONTAINER_NAME -- chown -R tomcat.tomcat /opt/glowroot
  lxc exec $CONTAINER_NAME -- rm -rf ${tdir}

  log_info "Glowroot credentials set. Restarting tomcat"
  lxc exec $CONTAINER_NAME -- service tomcat9 restart

  echo "Credentials have been set:"
  echo "========================="
  echo "Instance: ${CONTAINER_NAME}"
  echo "Service: ${CONTAINER_NAME}-glowroot"
  echo "Username: admin"
  echo "Password: ${passwd}"

  # write creds to file
  local json_str='{"service":"'${CONTAINER_NAME}'-glowroot","username":"admin","password":"'${passwd}'"}'
  save_creds $json_str
}

function save_es_creds() {
  local readonly passwd="$1"
  local creds=$(get_creds elasticsearch)

  if [[ "$creds" ]]; then
    local old_password=$(echo $creds | jq -r .password)
  else
    local old_password=$(lxc exec $CONTAINER_NAME -- /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic -s -b)
  fi

  lxc exec $CONTAINER_NAME -- curl --cacert /etc/elasticsearch/certs/http_ca.crt -u "elastic:$old_password" -XPUT -H 'Content-Type: application/json' 'https://localhost:9200/_xpack/security/user/elastic/_password' -d '{ "password‚Äù:'${passwd}' }'
  local json_str='{"service":"elasticsearch","username":"elastic","password":"'${passwd}'"}'

  save_creds $json_str
}

if [ $EUID -ne 0 ]; then
  log_error "You must run this program as root. Quitting"
  exit 1
fi

# Check Service
if [[ $SERVICE == "" ]] || [[ $CONTAINER_NAME == "" ]]; then
  usage
  exit 1
fi

if [[ ! "${VALID_SERVICES[*]}" =~ "${SERVICE}" ]]; then
  log_error "Service ${SERVICE} not found! Valid services are: ${VALID_SERVICES[@]}"
  exit 1
fi

VALID_CONTAINER=$(lxc list -c n -f csv | grep -w $CONTAINER_NAME)
if [[ $VALID_CONTAINER == "" ]]; then
  log_error "Container ${CONTAINER_NAME} not found!"
  exit 1
fi

log_info "Service ${SERVICE} found. Setting credentials"
echo "=============================="
echo "Do you want to add the password manually for the user admin in the service ${SERVICE}? (If not, password will be generated randomly)"
select yn in "Yes" "No"; do
  case $yn in
    Yes )
      echo
      echo "Please insert a password:"
      read PASSWD
      break;;
    No )
      PASSWD=$(openssl rand -hex 24)
      break;;
  esac
done

case $SERVICE in
  "munin" )
    save_munin_creds $PASSWD
    ;;
  "glowroot" )
    save_glowroot_creds $PASSWD
    ;;
  "elasticsearch" )
    save_es_creds $PASSWD
    ;;
  * ) # this shouldn't trigger but adding just in case
    log_error "Service $SERVICE not supported. Quitting."
    ;;
esac
